import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

plugins {
    id 'org.ajoberstar.grgit' version '3.1.1'
    id 'com.github.johnrengelman.shadow' version '5.1.0'
    id 'com.github.ben-manes.versions' version '0.22.0'
}
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'java-library'
apply plugin: 'eclipse'
apply plugin: 'jacoco'

group 'net.minecraftforge'

sourceCompatibility = 1.8
targetCompatibility = 1.8

jacoco {
    toolVersion = '0.8.2'
}

def getVersion = {
    //TAG-offset-hash
    def raw = grgit.describe(longDescr: true, tags:true)
    def desc = (raw == null ? '0.0-0-unknown' : grgit.describe(longDescr: true, tags:true)).split('-') as List
    def hash = desc.remove(desc.size() - 1)
    def offset = desc.remove(desc.size() - 1)
    def tag = desc.join('-')
    def branch = grgit.branch.current().name
    if (branch in ['master', 'HEAD'])
        branch = null
    if (branch != null && branch.endsWith('.x') && tag.equals(branch.substring(0, branch.length() - 2)))
        branch = null
    return "${tag}.${offset}${t -> if (branch != null) t << '-' + branch}".toString()
}
version = getVersion()
logger.lifecycle('Calculated Version: ' + version)

dependencyUpdates.resolutionStrategy {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm', 'preview'].any { qualifier ->
                selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
            }
            if (rejected) {
                selection.reject('Release candidate')
            }
        }
    }
}

test {
    useJUnitPlatform()
}

ext.antlr = [
        grammarpackage: 'net.minecraftforge.accesstransformer.generated',
        antlrSource: 'src/main/antlr4',
        destinationDir: "src/generated-sources/java"
]

configurations {
    antlr4 {
        description = 'ANTLR4'
    }
}

task antlrOutputDir {
    mkdir antlr.destinationDir
}

task generateGrammarSource(dependsOn: antlrOutputDir, type: JavaExec)

sourceSets {
    mlservice
    testJars
    antlr4 {
        java {
            srcDir {
                antlr.destinationDir
            }
        }
    }
}

compileJava {
    dependsOn generateGrammarSource
    source antlr.destinationDir
}

clean {
    delete antlr.destinationDir
}

ext.sharedManifest = manifest {
    attributes(['Specification-Title': 'accesstransformers',
                'Specification-Vendor': 'Forge',
                'Specification-Version': '1', // Currently version 1 of the accesstransformer specification
                'Implementation-Title': project.name,
                'Implementation-Version': "${version}+${System.getenv("BUILD_NUMBER")?:0}+${grgit.head().abbreviatedId}",
                'Implementation-Vendor': 'Forge',
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'Git-Commit': grgit.head().abbreviatedId,
                'Git-Branch': grgit.branch.current().getName() ],
            'net/minecraftforge/accesstransformer/service/')
    attributes(['Specification-Title': 'accesstransformers',
                'Specification-Vendor': 'Forge',
                'Specification-Version': '1', // Currently version 1 of the accesstransformer specification
                'Implementation-Title': project.name,
                'Implementation-Version': "${version}+${System.getenv("BUILD_NUMBER")?:0}+${grgit.head().abbreviatedId}",
                'Implementation-Vendor': 'Forge',
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'Git-Commit': grgit.head().abbreviatedId,
                'Git-Branch': grgit.branch.current().getName() ],
            'net/minecraftforge/accesstransformer/')
}

task mlserviceJar(type: Jar) {
    archiveClassifier = 'service'
    from sourceSets.main.output
    from sourceSets.mlservice.output
    manifest = project.manifest {
        from sharedManifest
    }
}

task testsJar(type: Jar) {
    archiveClassifier = 'testsjar'
    from sourceSets.testJars.output
}

task sourcesJar(type: Jar) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
    from sourceSets.mlservice.allSource
}


build.dependsOn testsJar
build.dependsOn mlserviceJar

repositories {
    mavenCentral()
    maven {
        name = 'forge'
        url = 'http://files.minecraftforge.net/maven'
    }
}

dependencies {
    testImplementation('org.junit.jupiter:junit-jupiter-api:5.4.+')
    testImplementation('org.powermock:powermock-core:2.0+')
    testImplementation('cpw.mods:modlauncher:3.2.+')
    testImplementation('com.google.code.gson:gson:2.8.5')
    testCompileOnly(sourceSets.mlservice.output)
    testRuntime('org.junit.jupiter:junit-jupiter-engine:5.4.+')
    testRuntime(sourceSets.testJars.runtimeClasspath)
    testRuntime(sourceSets.mlservice.output)
    implementation(sourceSets.antlr4.output)
    implementation('org.antlr:antlr4-runtime:4.7.2')
    implementation('net.sf.jopt-simple:jopt-simple:5.0.4')
    implementation('org.ow2.asm:asm:6.2')
    implementation('org.ow2.asm:asm-commons:6.2')
    implementation('org.ow2.asm:asm-tree:6.2')
    implementation('org.apache.logging.log4j:log4j-api:2.11.+')
    implementation('org.apache.logging.log4j:log4j-core:2.11.+')
    implementation('cpw.mods:modlauncher:3.2.+:api')
    implementation('cpw.mods:modlauncher:3.2.+')
    mlserviceImplementation('cpw.mods:modlauncher:3.2.+:api')
    mlserviceImplementation('cpw.mods:modlauncher:3.2.+')
    mlserviceImplementation(sourceSets.main.output)
    antlr4Compile('org.antlr:antlr4:4.7.2')
}


// Shadow Jar with antlr embedded
shadowJar {
    classifier = 'shadowed'
    from sourceSets.main.output
    from sourceSets.mlservice.output
    manifest {
        inheritFrom mlserviceJar.manifest
        attributes('Main-Class': 'net.minecraftforge.accesstransformer.TransformerProcessor')
        attributes('Multi-Release': 'true')
    }
    dependencies {
        exclude(dependency {
            it.moduleName != 'antlr4-runtime'
        })
    }
}

task fatJar(type: ShadowJar) {
    archiveClassifier = 'fatjar'
    from sourceSets.main.output
    from sourceSets.mlservice.output
    configurations = shadowJar.configurations
    manifest {
        inheritFrom mlserviceJar.manifest
        attributes('Main-Class': 'net.minecraftforge.accesstransformer.TransformerProcessor')
        attributes('Multi-Release': 'true')
    }
    dependencies {
        exclude(dependency {
            it.moduleName == 'antlr4'
        })
    }
}

artifacts {
    archives jar
    archives sourcesJar
    archives testsJar
    archives mlserviceJar
    archives shadowJar
    archives fatJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact shadowJar
            artifact fatJar
            artifact mlserviceJar
            pom {
                name = 'Access Transformers'
                description = 'Transforms class member access based on specification files'
                url = 'https://github.com/MinecraftForge/AccessTransformers'
                scm {
                    url = 'https://github.com/MinecraftForge/AccessTransformers'
                    connection = 'scm:git:git://github.com/MinecraftForge/AccessTransformers.git'
                    developerConnection = 'scm:git:git@github.com:MinecraftForge/AccessTransformers.git'
                }
                issueManagement {
                    system = 'github'
                    url = 'https://github.com/MinecraftForge/AccessTransformers/issues'
                }

                licenses {
                    license {
                        name = 'MIT'
                        url = 'https://opensource.org/licenses/MIT'
                    }
                }

                developers {
                    developer {
                        id = 'cpw'
                        name = 'cpw'
                    }
                    developer {
                        id = 'DemonWav'
                        name = 'DemonWav'
                    }
                }
            }
        }
    }
    repositories {
        maven {
            if (project.hasProperty('forgeMavenPassword')) {
                credentials {
                    username project.properties.forgeMavenUser
                    password project.properties.forgeMavenPassword
                }
                url 'http://files.minecraftforge.net/maven/manage/upload'
            } else {
                url 'file://' + rootProject.file('repo').getAbsolutePath()
            }
        }
    }
}

generateGrammarSource {
    description = 'Generates Java sources from ANTLR4 grammars.'
    inputs.dir file(antlr.antlrSource)
    outputs.dir file(antlr.destinationDir)
    def grammars = fileTree(antlr.antlrSource).include('**/*.g4')
    main = 'org.antlr.v4.Tool'
    classpath = configurations.antlr4Compile
    def pkg = antlr.grammarpackage.replaceAll("\\.", "/")
    args = ["-o", "${antlr.destinationDir}/${pkg}", '-visitor', '-package', antlr.grammarpackage, grammars.files].flatten()
}
