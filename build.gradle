plugins {
    id 'org.ajoberstar.grgit' version '4.1.0'
    id 'com.github.johnrengelman.shadow' version '6.1.0'
    id 'com.github.ben-manes.versions' version '0.36.0'
}

apply plugin: 'maven-publish'
apply plugin: 'java-library'
apply plugin: 'eclipse'

group 'net.minecraftforge'

java.toolchain.languageVersion = JavaLanguageVersion.of(8)

version = grgit.describe(longDescr: true).split('-').with { "${it[0]}.${it[1]}" }

def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/
    return !stableKeyword && !(version ==~ regex)
}

dependencyUpdates {
    rejectVersionIf {
        isNonStable(it.candidate.version)
    }
}

test {
    useJUnitPlatform()
}

ext.antlr = [
	grammarpackage: 'net.minecraftforge.accesstransformer.generated',
	antlrSource: 'src/main/antlr4',
	destinationDir: "src/generated-sources/java"
]

configurations {
    antlr4 {
        description = 'ANTLR4'
    }
}

task antlrOutputDir {
    mkdir antlr.destinationDir
}

task generateGrammarSource(dependsOn: antlrOutputDir, type: JavaExec)

sourceSets {
    testJars
    antlr4 {
        java {
            srcDir {
                antlr.destinationDir
            }
        }
    }
}

compileJava {
    dependsOn generateGrammarSource
    source antlr.destinationDir
}

clean {
    delete antlr.destinationDir
}

jar.manifest = manifest {
    attributes(['Specification-Title': 'accesstransformers',
                'Specification-Vendor': 'forge',
                'Specification-Version': '1', // Currently version 1 of the accesstransformer specification
                'Implementation-Title': project.name,
                'Implementation-Version': "${project.version}+${System.getenv('BUILD_NUMBER')?:0}+${grgit.branch.current().getName()}.${grgit.head().abbreviatedId}",
                'Implementation-Vendor': 'forge',
                'Implementation-Timestamp': java.time.Instant.now().toString(),
                'Git-Commit': grgit.head().abbreviatedId,
                'Git-Branch': grgit.branch.current().getName(),
                'Build-Number': "${System.getenv('BUILD_NUMBER')?:0}" ],
            'net/minecraftforge/accesstransformer/service/')
    attributes(['Specification-Title': 'accesstransformers',
                'Specification-Vendor': 'Forge',
                'Specification-Version': '1', // Currently version 1 of the accesstransformer specification
                'Implementation-Title': project.name,
                'Implementation-Version': "${project.version}+${System.getenv('BUILD_NUMBER')?:0}+${grgit.branch.current().getName()}.${grgit.head().abbreviatedId}",
                'Implementation-Vendor': 'forge',
                'Implementation-Timestamp': java.time.Instant.now().toString(),
                'Git-Commit': grgit.head().abbreviatedId,
                'Git-Branch': grgit.branch.current().getName(),
                'Build-Number': "${System.getenv('BUILD_NUMBER')?:0}" ],
            'net/minecraftforge/accesstransformer/')
}

task testsJar(type: Jar) {
    archiveClassifier = 'testsjar'
    from sourceSets.testJars.output
}

task sourcesJar(type: Jar) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}


build.dependsOn testsJar

repositories {
    mavenCentral()
    maven {
        name = 'forge'
        url = 'http://files.minecraftforge.net/maven'
    }
}

dependencies {
    testImplementation('org.junit.jupiter:junit-jupiter-api:5.7.0')
    testImplementation('org.powermock:powermock-core:2.0+')
    testImplementation('cpw.mods:modlauncher:6.1.+')
    testImplementation('com.google.code.gson:gson:2.8.6')
    testRuntimeOnly('org.junit.jupiter:junit-jupiter-engine:5.7.0')
    testRuntimeOnly(sourceSets.testJars.runtimeClasspath)
    implementation(sourceSets.antlr4.output)
    implementation('org.antlr:antlr4-runtime:4.9.1')
    implementation('net.sf.jopt-simple:jopt-simple:5.0.4')
    implementation('org.ow2.asm:asm:9.0')
    implementation('org.ow2.asm:asm-commons:9.0')
    implementation('org.ow2.asm:asm-tree:9.0')
    implementation('org.apache.logging.log4j:log4j-api:2.11.2')
    implementation('org.apache.logging.log4j:log4j-core:2.11.2')
    implementation('cpw.mods:modlauncher:6.1.3:api')
    implementation('cpw.mods:modlauncher:6.1.3')
    antlr4Compile('org.antlr:antlr4:4.9.1')
}


shadowJar {
    classifier 'fatjar'
    manifest {
        inheritFrom jar.manifest
        attributes('Main-Class': 'net.minecraftforge.accesstransformer.TransformerProcessor')
        attributes('Multi-Release': 'true')
    }
    dependencies {
        exclude(dependency {
            it.moduleName == 'antlr4'
        })
    }
}

artifacts {
    archives jar
    archives sourcesJar
    archives testsJar
    archives shadowJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourcesJar
            pom {
                name = 'Access Transformers'
                description = 'Transforms class member access based on specification files'
                url = 'https://github.com/MinecraftForge/AccessTransformers'
                scm {
                    url = 'https://github.com/MinecraftForge/AccessTransformers'
                    connection = 'scm:git:git://github.com/MinecraftForge/AccessTransformers.git'
                    developerConnection = 'scm:git:git@github.com:MinecraftForge/AccessTransformers.git'
                }
                issueManagement {
                    system = 'github'
                    url = 'https://github.com/MinecraftForge/AccessTransformers/issues'
                }

                licenses {
                    license {
                        name = 'MIT'
                        url = 'https://opensource.org/licenses/MIT'
                    }
                }

                developers {
                    developer {
                        id = 'cpw'
                        name = 'cpw'
                    }
                    developer {
                        id = 'DemonWav'
                        name = 'DemonWav'
                    }
                }
            }
        }
    }
    repositories {
        maven {
            if (project.hasProperty('forgeMavenPassword')) {
                credentials {
                    username project.properties.forgeMavenUser
                    password project.properties.forgeMavenPassword
                }
                url 'https://files.minecraftforge.net/maven/manage/upload'
            } else {
                url 'file://' + rootProject.file('repo').getAbsolutePath()
            }
        }
    }
}

generateGrammarSource {
    description = 'Generates Java sources from ANTLR4 grammars.'
    inputs.dir file(antlr.antlrSource)
    outputs.dir file(antlr.destinationDir)
    def grammars = fileTree(antlr.antlrSource).include('**/*.g4')
    main = 'org.antlr.v4.Tool'
    classpath = configurations.antlr4Compile
    def pkg = antlr.grammarpackage.replaceAll("\\.", "/")
    args = ["-o", "${antlr.destinationDir}/${pkg}", '-visitor', '-package', antlr.grammarpackage, grammars.files].flatten()
}
