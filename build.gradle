plugins {
    id 'org.ajoberstar.reckon' version '0.8.0'
    id 'com.github.johnrengelman.shadow' version '2.0.4'
    id 'org.ajoberstar.grgit' version '2.2.1'
}
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'java-library'
apply plugin: 'eclipse'
apply plugin: 'jacoco'

group 'net.minecraftforge'

sourceCompatibility = 1.8
targetCompatibility = 1.8

jacoco {
    toolVersion = "0.8.1"
}

reckon {
    scopeFromProp()
    stageFromProp('milestone', 'rc', 'final')
}

reckonTagCreate.dependsOn check

test {
    useJUnitPlatform()
}

ext.antlr = [
        grammarpackage: "com.demonwav.primeiron",
        antlrSource: 'src/main/antlr4',
        destinationDir: "src/generated-sources/java"
]

configurations {
    antlr4 {
        description = "ANTLR4"
    }
}

task antlrOutputDir {
    mkdir antlr.destinationDir
}

task generateGrammarSource(dependsOn: antlrOutputDir, type: JavaExec)

sourceSets {
    mlservice
    testJars
    antlr4 {
        java {
            srcDir {
                antlr.destinationDir
            }
        }
    }
}

compileJava {
    dependsOn generateGrammarSource
    source antlr.destinationDir
}

clean {
    delete antlr.destinationDir
}

ext.sharedManifest = manifest {
    attributes(["Specification-Title": "accesstransformers",
                "Specification-Vendor": "Forge",
                "Specification-Version": "1", // Currently version 1 of the accesstransformer specification
                "Implementation-Title": project.name,
                "Implementation-Version": "${version}+${System.getenv("BUILD_NUMBER")?:0}+${grgit.head().getAbbreviatedId(8)}",
                "Implementation-Vendor" :"Forge",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "Git-Commit": grgit.head().getAbbreviatedId(8),
                "Git-Branch": grgit.branch.current().getName() ],
            "cpw/mods/accesstransformer/service/")
}

task mlserviceJar(type: Jar) {
    classifier = 'service'
    from sourceSets.main.output
    from sourceSets.mlservice.output
    manifest = project.manifest {
        from sharedManifest
    }
}

task testsJar(type: Jar) {
    classifier = 'testsjar'
    from sourceSets.testJars.output
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
    from sourceSets.mlservice.allSource
}


build.dependsOn testsJar
build.dependsOn mlserviceJar

repositories {
    mavenCentral()
    maven {
        name = "forge"
        url = "http://files.minecraftforge.net/maven"
    }
}

dependencies {
    testImplementation("org.junit.jupiter:junit-jupiter-api:5.2.+")
    testImplementation("org.powermock:powermock-core:1.7.+")
    testImplementation("cpw.mods:modlauncher:0.1+")
    testCompileOnly(sourceSets.mlservice.output)
    testRuntime("org.junit.jupiter:junit-jupiter-engine:5.2.+")
    testRuntime("org.apache.logging.log4j:log4j-core:2.11.+")
    testRuntime(sourceSets.testJars.runtimeClasspath)
    testRuntime(sourceSets.mlservice.output)
    implementation("org.antlr:antlr4-runtime:4.7.1")
    implementation("net.sf.jopt-simple:jopt-simple:5.0.4")
    implementation("org.ow2.asm:asm:6.2")
    implementation("org.ow2.asm:asm-commons:6.2")
    implementation("org.ow2.asm:asm-tree:6.2")
    implementation("org.apache.logging.log4j:log4j-api:2.11.+")
    implementation("cpw.mods:modlauncher:0.1+:api")
    mlserviceImplementation("cpw.mods:modlauncher:0.1+:api")
    mlserviceImplementation(sourceSets.main.output)
    antlr4Compile("org.antlr:antlr4:4.7.1")
}


// Shadow Jar with antlr embedded
shadowJar {
    classifier = 'shadowed'
    from sourceSets.main.output
    from sourceSets.mlservice.output
    manifest {
        inheritFrom mlserviceJar.manifest
        attributes('Main-Class': 'cpw.mods.accesstransformer.TransformerProcessor')
    }
    dependencies {
        exclude(dependency {
            it.moduleName != 'antlr4-runtime'
        })
    }

}

artifacts {
    archives jar
    archives sourcesJar
    archives testsJar
    archives mlserviceJar
    archives shadowJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact shadowJar
            artifact mlserviceJar
            pom {
                name = 'Access Transformers'
                description = 'Transforms class member access based on specification files'
                url = 'https://github.com/MinecraftForge/accesstransformers'
                scm {
                    url = 'https://github.com/MinecraftForge/accesstransformers'
                    connection = 'scm:git:git://github.com/MinecraftForge/accesstransformers.git'
                    developerConnection = 'scm:git:git@github.com:MinecraftForge/accesstransformers.git'
                }
                issueManagement {
                    system = 'github'
                    url = 'https://github.com/MinecraftForge/accesstransformers/issues'
                }

                licenses {
                    license {
                        name = 'MIT'
                        url = 'https://opensource.org/licenses/MIT'
                    }
                }

                developers {
                    developer {
                        id = 'cpw'
                        name = 'cpw'
                    }
                    developer {
                        id = 'DemonWav'
                        name = 'DemonWav'
                    }
                }
            }
        }
    }
    repositories {
        maven {
            if (project.hasProperty('forgeMavenPassword')) {
                credentials {
                    username project.properties.forgeMavenUser
                    password project.properties.forgeMavenPassword
                }
                url 'http://files.minecraftforge.net/maven/manage/upload'
            } else {
                url 'file://' + rootProject.file('repo').getAbsolutePath()
            }
        }
    }
}

generateGrammarSource {
    description = 'Generates Java sources from ANTLR4 grammars.'
    inputs.dir file(antlr.antlrSource)
    outputs.dir file(antlr.destinationDir)
    def grammars = fileTree(antlr.antlrSource).include('**/*.g4')
    main = 'org.antlr.v4.Tool'
    classpath = configurations.antlr4Compile
    def pkg = antlr.grammarpackage.replaceAll("\\.", "/")
    args = ["-o", "${antlr.destinationDir}/${pkg}", "-visitor", "-package", antlr.grammarpackage, grammars.files].flatten()
}
